<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PAT备考 | 贪心算法 —— A1033</title>
      <link href="/2020/04/19/PAT%E5%A4%87%E8%80%83-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95-%E2%80%94%E2%80%94-A1070/"/>
      <url>/2020/04/19/PAT%E5%A4%87%E8%80%83-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95-%E2%80%94%E2%80%94-A1070/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><img src="https://s1.ax1x.com/2020/04/19/JMm0oV.png" alt></p><p><strong>Sample Input 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">50 1300 12 8</span><br><span class="line">6.00 1250</span><br><span class="line">7.00 600</span><br><span class="line">7.00 150</span><br><span class="line">7.10 0</span><br><span class="line">7.20 200</span><br><span class="line">7.50 400</span><br><span class="line">7.30 1000</span><br><span class="line">6.85 300</span><br></pre></td></tr></table></figure><p><strong>Sample Output 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">749.17</span><br></pre></td></tr></table></figure><p><strong>Sample Input 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">50 1300 12 2</span><br><span class="line">7.10 0</span><br><span class="line">7.00 600</span><br></pre></td></tr></table></figure><p><strong>Sample Output 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The maximum travel distance &#x3D; 1200.00</span><br></pre></td></tr></table></figure><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>这一题目用到的算法思想是<code>贪心</code>。</p><h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><p>贪心算法，可以用来计算最优解问题。其主要思想是，把一个大问题化为一个个小问题，对每个小问题求局部最优解。我们通常认为这样可以达到一个全局最优解，但也需要验证其结果是否为全局最优解。</p><blockquote><p>注意贪心和分治的区别。</p></blockquote><h2 id="解题策略"><a href="#解题策略" class="headerlink" title="解题策略"></a>解题策略</h2><p>为了使得到达目的地时的油价最低，则每走一段路都需要确保当前的油价花费是最少的。</p><p>我们假设满油状态下能达到的最远距离为<code>MAX</code>。方案如下：</p><ol><li><p>如果到<code>HangZhou</code>没有距离为0的油站，则车子无法开出，输出：</p><blockquote><p>The maximum travel distance = 0. 00</p></blockquote></li><li><p>找到距离小于<code>MAX</code>的，且油价比当前所在加油站油价低的加油站为下一个目的地；</p></li><li><p>如果没有比当前油价低的，则找出距离在<code>MAX</code>范围内的，油价最低的油站为下一个目的地。</p></li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>未能完全通过测试，但是找不出<code>bug</code>。期待大佬的指教。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">510</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1000000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> price,dis;</span><br><span class="line">&#125;node;</span><br><span class="line"></span><br><span class="line">node <span class="built_in">list</span>[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.dis &lt; b.dis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">double</span> Cmax, D, Davg;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lf %lf %lf %d"</span>, &amp;Cmax, &amp;D, &amp;Davg, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf %lf"</span>, &amp;<span class="built_in">list</span>[i].price, &amp;<span class="built_in">list</span>[i].dis);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">list</span>[n].price = <span class="number">0</span>;    <span class="comment">// 数组最后加一组 node</span></span><br><span class="line">    <span class="built_in">list</span>[n].dis = D;</span><br><span class="line"></span><br><span class="line">    sort(<span class="built_in">list</span>, <span class="built_in">list</span> + n, cmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">list</span>[<span class="number">0</span>].dis != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"The maximum travel distance = 0.00\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> now = <span class="number">0</span>;    <span class="comment">// 当前编号</span></span><br><span class="line">        <span class="keyword">double</span> expens = <span class="number">0</span>, nowTank = <span class="number">0</span>, MAX = Cmax * Davg;   <span class="comment">// 花费， 当前油量， 最长距离</span></span><br><span class="line">        <span class="keyword">while</span> (now &lt; n) &#123;         <span class="comment">// 通过油站来记录距离</span></span><br><span class="line">            <span class="keyword">int</span> k = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">double</span> minprice = INF;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = now + <span class="number">1</span>; i &lt;= n &amp;&amp; <span class="built_in">list</span>[i].dis - <span class="built_in">list</span>[now].dis &lt;= MAX; i++ ) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">list</span>[i].price &lt; minprice) &#123;    <span class="comment">// strategy one : 小于当前值并且最近</span></span><br><span class="line">                    minprice = <span class="built_in">list</span>[i].price;</span><br><span class="line">                    k = i;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (minprice &lt; <span class="built_in">list</span>[now].price) <span class="keyword">break</span>;   <span class="comment">// minprice 小于当前的price，直接跳出</span></span><br><span class="line">                &#125; <span class="comment">// 等找完所有的并选出一个最小值，再跳出。</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (k == <span class="number">-1</span>) <span class="keyword">break</span>;   <span class="comment">// k == -1 找不到，输出“最长距离”</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">double</span> need = (<span class="built_in">list</span>[k].dis - <span class="built_in">list</span>[now].dis) / Davg;    <span class="comment">// need 为从 now 到 k 的油量</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (minprice &lt; <span class="built_in">list</span>[now].price) &#123;   <span class="comment">// 小于当前的price；</span></span><br><span class="line">                <span class="keyword">if</span> (nowTank &lt; need) &#123;           <span class="comment">// 油量不够，加点油</span></span><br><span class="line">                    expens += (need - nowTank) * <span class="built_in">list</span>[now].price;</span><br><span class="line">                    nowTank = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;                        <span class="comment">// 油量够，直接相减</span></span><br><span class="line">                    nowTank -= need;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;                           <span class="comment">// 当前能到达的最小值</span></span><br><span class="line">                expens += (Cmax - nowTank) * <span class="built_in">list</span>[now].price;</span><br><span class="line">                nowTank = Cmax - need;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            now = k;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (now == n)                            <span class="comment">// 能到达， 输出总花费</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>, expens);</span><br><span class="line">        <span class="keyword">else</span>                                     <span class="comment">// 不能到达， 输出最远距离</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Tha maximum travel distance = %.2f\n"</span>, <span class="built_in">list</span>[now].dis + MAX);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PAT备考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> Coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>REST | nodejs后端搭建</title>
      <link href="/2020/04/16/REST-nodejs%E5%90%8E%E7%AB%AF%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/04/16/REST-nodejs%E5%90%8E%E7%AB%AF%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>大作业，我负责后端。记录建站过程。</p><h2 id="express-如何传参"><a href="#Express-如何传参" class="headerlink" title="Express 如何传参"></a>Express 如何传参</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">'/add/:id'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.params.id);</span><br><span class="line">    res.send(<span class="string">"information!"</span> + req.params.id);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>通过<code>params</code>来传递参数，参数存在于<code>访问路径的url</code>中。</p>]]></content>
      
      
      <categories>
          
          <category> 建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql | centos下的Mariadb数据库的常用指令存档</title>
      <link href="/2020/04/15/Mysql-centos%E4%B8%8B%E7%9A%84Mariadb%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E5%AD%98%E6%A1%A3/"/>
      <url>/2020/04/15/Mysql-centos%E4%B8%8B%E7%9A%84Mariadb%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E5%AD%98%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<p>最近有一个大作业，我们决定搭建一个网站，当然题目是限定的，只能做类似于当当网的电子书店。我和同组的一个小伙伴一起负责后端部分，用<code>node.js</code>做网站框架。老师规定必须使用<code>MySql</code>等常用的数据库，不能使用<code>MongoDB</code>这样的数据库（<del>真的很死板</del>）。怕自己忘记这些数据库的常用指令，所以存个档。</p><h3 id="登陆指令"><a href="#登陆指令" class="headerlink" title="登陆指令"></a>登陆指令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>然后输入密码</p><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database name;</span><br></pre></td></tr></table></figure><h3 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use DATABASE;</span><br></pre></td></tr></table></figure><h3 id="新建表"><a href="#新建表" class="headerlink" title="新建表"></a>新建表</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">create table books (</span><br><span class="line">goods_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">goods_name VARCHAR(100) NOT NULL,</span><br><span class="line">goods_cover VARCHAR(1000) NOT NULL,</span><br><span class="line">goods_author VARCHAR(100),</span><br><span class="line">goods_publisher VARCHAR(200),</span><br><span class="line">goods_description VARCHAR(500),</span><br><span class="line">goods_grade INT,</span><br><span class="line">goods_price FLOAT NOT NULL,</span><br><span class="line">goods_course VARCHAR(100) NOT NULL,</span><br><span class="line">goods_ups_time DATE NOT NULL);</span><br></pre></td></tr></table></figure><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table table_name;</span><br></pre></td></tr></table></figure><h3 id="查看所有表"><a href="#查看所有表" class="headerlink" title="查看所有表"></a>查看所有表</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure><h3 id="描述表的条目属性等"><a href="#描述表的条目属性等" class="headerlink" title="描述表的条目属性等"></a>描述表的条目属性等</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DESCRIBE TABLENAME;</span><br></pre></td></tr></table></figure><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO TABLE_NAME VALUES ('value');</span><br></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from table_name where (condition)</span><br></pre></td></tr></table></figure><blockquote><p>MySql 和 MariaDB 不区分大小写。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> MariaDb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建站 | Github pages绑定域名遇到的坑</title>
      <link href="/2020/04/10/%E5%BB%BA%E7%AB%99-github-pages%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
      <url>/2020/04/10/%E5%BB%BA%E7%AB%99-github-pages%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<blockquote><p>碎碎念了很多乱七八糟的东西，如果嫌烦可以直接跳到“正确的解决方案”。</p></blockquote><p>我纠结了好久，还是准备给自己的blog搞一个自己的域名。毕竟自己的域名还是比<code>github.io</code>要香一些。</p><p>于是我打开了<code>阿里云</code>网站开始挑选。</p><p>说是挑选，其实根本没有啥好选的啦。那些好听的域名都被买走了。想了想就买了一个最简单的<a href="https://zxysite.xyz">zxysite.xyz</a>。不买<code>.com</code>后缀的原因是贵。而<code>.xyz</code>只需要<code>5r</code>就可以拥有一年的使用权。</p><p><img src="https://s1.ax1x.com/2020/04/11/GqA6SJ.png" alt="ken1"></p><h2 id="按照别人的教程"><a href="#按照别人的教程" class="headerlink" title="按照别人的教程"></a>按照别人的教程</h2><p>当我开始按照网上的说法绑定域名时，我的步骤如下：</p><ol><li><p>打开命令行，<code>ping</code>自己的<code>username.github.io</code>地址，成功得到了一个ip如下：</p><p><img src="https://s1.ax1x.com/2020/04/11/GqArYF.png" alt="ken2"></p></li><li><p>打开阿里云的DNS解析，添加了一下两条记录。</p><blockquote><p>CNAME    www    specular-zxy.github.io </p><p>A               @          185.199.119.153</p></blockquote></li><li><p>然后打开了我的<code>hexo</code>博客的本地文件，在<code>source</code>路径下新建了<code>CNAME</code>文件，老老实实地填入了我新买好的域名。</p></li><li><p>然后在对应的GitHub仓库的设置里再一次填入我的域名。</p><p><img src="https://s1.ax1x.com/2020/04/11/GqAsW4.png" alt="ken3"></p></li></ol><p>一切似乎都正常了，我在浏览器输入<code>zxysite.xyz</code>，也可以正常访问了。</p><p>我兴奋地把它分享给一个工具人，它却告诉我打不开……</p><p>而我又可以正常打开，这简直太奇怪了。</p><p>于是我又开始Google解决方案。</p><h2 id="cloudflare-加速"><a href="#CloudFlare-加速" class="headerlink" title="CloudFlare 加速"></a>CloudFlare 加速</h2><p>这一次，我搜到了一个方案告诉我使用这个CloudFlare，来加速访问我的github就可以了。</p><p>然后我就登陆了CloudFlare，并按照官网的傻瓜教程，把域名的DNS解析换过去了。</p><blockquote><p>鬼知道我为什么会搜到这样的解决方案，我也很无奈……</p></blockquote><p>CloudFlare虽然可以让你薅羊毛，但是我觉得它甚至没有Github.io快。大概是羊毛薅多了，没得给我分一杯了。反正就是很慢啦。最后我还是在阿里云控制台，又把DNS换过去了。</p><h2 id="正确的解决方案"><a href="#正确的解决方案" class="headerlink" title="正确的解决方案"></a>正确的解决方案</h2><p>首先奉上<a href="https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site" target="_blank" rel="noopener">官方指路</a>文档，按照绑定顶尖域名的方式来解析你的域名<a href="https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain" target="_blank" rel="noopener">Configuring an apex domain</a>。</p><p>不要企图通过<code>ping</code>的方式，来找出所有的IP地址。因为你的网站的IP是会变化的哦。所以你需要添加这四个解析到IP地址的<code>A</code>记录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">185.199.108.153</span><br><span class="line">185.199.109.153</span><br><span class="line">185.199.110.153</span><br><span class="line">185.199.111.153</span><br></pre></td></tr></table></figure><p>添加完成后，你的DNS解析记录应该是这样的。</p><p><img src="https://s1.ax1x.com/2020/04/13/Gj0E1f.png" alt="效果图"></p><p>然后你的网站就可以正常的被访问啦。</p>]]></content>
      
      
      <categories>
          
          <category> 建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT备考 | A1080 Graduate Admission</title>
      <link href="/2020/04/10/PAT%E5%A4%87%E8%80%83-A1080-Graduate-Admission/"/>
      <url>/2020/04/10/PAT%E5%A4%87%E8%80%83-A1080-Graduate-Admission/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> PAT备考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> Coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔 | 小记</title>
      <link href="/2020/04/09/%E5%B0%8F%E8%AE%B0/"/>
      <url>/2020/04/09/%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h2><p>&emsp;最近一直在写<code>PAT</code>的题目，写着写着就不会写了。然后在网站上搜索别人的代码，觉得很厉害。</p><p>&emsp;虽然自己没有太多值得分享的东西，但还是很希望能够这个cyberspace里面有一个自己的记录空间。</p><p>&emsp;也许等自己过几年再来看的时候，会对当时的境遇有不同的看法吧。所以这里也不仅仅只是一个<code>coding share</code>，还会加入很多杂七杂八的东西吧。</p><h2 id="雏形"><a href="#雏形" class="headerlink" title="雏形"></a>雏形</h2><p>&emsp;仔细想想，我其实有蛮多喜爱的东西的。比如：尤克里里、水彩画和摄影等等。但这些爱好都挤在学习和休息的间隙中，我很难为他们安排足够充分的时间。</p><p>&emsp;往往总是拿着”我要玩耍！ “的理由把这些爱好挤到角落里，其实这并不好。</p><p>&emsp;所以啊，希望这个小站在未来能监督我发布更多有趣的内容和更多有用的分享吧。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT备考 | 记录一些题目</title>
      <link href="/2020/04/08/PAT%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%B7%AF/"/>
      <url>/2020/04/08/PAT%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p>用来记录自己写错的，比较好的例题。</p><h2 id="洗牌"><a href="#洗牌" class="headerlink" title="洗牌"></a>洗牌</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Shuffling is a procedure used to randomize a deck of playing cards. Because standard shuffling techniques are seen as weak, and in order to avoid “inside jobs” where employees collaborate with gamblers by performing inadequate shuffles, many casinos employ <strong>automatic shuffling machines</strong>. Your task is to simulate a shuffling machine.</p><p>The machine shuffles a deck of 54 cards according to a given random order and repeats for a given number of times. It is assumed that the initial status of a card deck is in the following order:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">S1, S2, ..., S13, </span><br><span class="line">H1, H2, ..., H13, </span><br><span class="line">C1, C2, ..., C13, </span><br><span class="line">D1, D2, ..., D13, </span><br><span class="line">J1, J2</span><br></pre></td></tr></table></figure><p>where “S” stands for “Spade”, “H” for “Heart”, “C” for “Club”, “D” for “Diamond”, and “J” for “Joker”. A given order is a permutation of distinct integers in [1, 54]. If the number at the <em>i</em>-th position is <em>j</em>, it means to move the card from position <em>i</em> to position <em>j</em>. For example, suppose we only have 5 cards: S3, H5, C1, D13 and J2. Given a shuffling order {4, 2, 5, 3, 1}, the result will be: J2, H5, D13, S3, C1. If we are to repeat the shuffling again, the result will be: C1, H5, S3, J2, D13.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. For each case, the first line contains a positive integer <em>K</em> (≤20) which is the number of repeat times. Then the next line contains the given order. All the numbers in a line are separated by a space.</p><p><strong>Output Specification:</strong></p><p>For each test case, print the shuffling results in one line. All the cards are separated by a space, and there must be no extra space at the end of the line.</p><p><strong>Sample Input:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">36 52 37 38 3 39 40 53 54 41 11 12 13 42 43 44 2 4 23 24 25 26 27 6 7 8 48 49 50 51 9 10 14 15 16 5 17 18 19 1 20 21 22 28 29 30 31 32 33 34 35 45 46 47</span><br></pre></td></tr></table></figure><p><strong>Sample Output:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S7 C11 C10 C12 S1 H7 H8 H9 D8 D9 S11 S12 S13 D10 D11 D12 S3 S4 S6 S10 H1 H2 C13 D2 D3 D4 H6 H3 D13 J1 J2 C1 C2 C3 C4 D1 S5 H5 H11 H12 C6 C7 C8 C9 S2 S8 S9 H10 D5 D6 D7 H4 H13 C5</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span>::<span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也许可以用数字来代替输出</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shuffle</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sh, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;raw)</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">    result.resize(raw.<span class="built_in">size</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">54</span> ; i ++)&#123;</span><br><span class="line">        result[sh[i] - <span class="number">1</span>] = raw[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    raw = result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">list</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; raw ;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">54</span> ; i++)&#123;</span><br><span class="line">        raw.push_back(i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">54</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">        <span class="built_in">list</span>.push_back(k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n; i++)&#123;</span><br><span class="line">        shuffle(<span class="built_in">list</span>,raw);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">54</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> re = raw[i];</span><br><span class="line">        <span class="keyword">int</span> key = (<span class="keyword">int</span>)re/<span class="number">13</span>;</span><br><span class="line">        <span class="built_in">string</span> res = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(re == <span class="number">53</span>) res  = <span class="string">"J1"</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(re == <span class="number">54</span>) res = <span class="string">"J2"</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(re == <span class="number">13</span>) res = <span class="string">"S13"</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(re == <span class="number">26</span>) res = <span class="string">"H13"</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(re == <span class="number">39</span>) res = <span class="string">"C13"</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(re == <span class="number">52</span>) res = <span class="string">"D13"</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(key == <span class="number">0</span>)&#123;</span><br><span class="line">                res += <span class="string">"S"</span>;</span><br><span class="line">                res += to_string(re%<span class="number">13</span>);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key == <span class="number">1</span>)&#123;</span><br><span class="line">                res += <span class="string">"H"</span>;</span><br><span class="line">                res += to_string(re%<span class="number">13</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key == <span class="number">2</span>)&#123;</span><br><span class="line">                res += <span class="string">"C"</span>;</span><br><span class="line">                res += to_string(re%<span class="number">13</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key == <span class="number">3</span>)&#123;</span><br><span class="line">                res += <span class="string">"D"</span>;</span><br><span class="line">                res += to_string(re%<span class="number">13</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">53</span>) <span class="built_in">cout</span> &lt;&lt; res;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="a-b-and-c"><a href="#A-B-and-C" class="headerlink" title="A + B and C"></a>A + B and C</h2><h3 id="题目"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>Given three integers <em>A</em>, <em>B</em> and <em>C</em> in [−263,263], you are supposed to tell whether <em>A</em>+<em>B</em>&gt;<em>C</em>.</p><p><strong>Input Specification:</strong></p><p>The first line of the input gives the positive number of test cases, <em>T</em> (≤10). Then <em>T</em> test cases follow, each consists of a single line containing three integers <em>A</em>, <em>B</em> and <em>C</em>, separated by single spaces.</p><p><strong>Output Specification:</strong></p><p>For each test case, output in one line <code>Case #X: true</code> if <em>A</em>+<em>B</em>&gt;<em>C</em>, or <code>Case #X: false</code> otherwise, where <em>X</em> is the case number (starting from 1).</p><p><strong>Sample Input:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 2 3</span><br><span class="line">2 3 4</span><br><span class="line">9223372036854775807 -9223372036854775808 0</span><br></pre></td></tr></table></figure><p><strong>Sample Output:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Case #1: false</span><br><span class="line">Case #2: true</span><br><span class="line">Case #3: false</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;vector&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span>::<span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> a,b,c;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> result = a + b;</span><br><span class="line">        <span class="keyword">bool</span> flag;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (a &gt; <span class="number">0</span> &amp;&amp; b &gt; <span class="number">0</span> &amp;&amp; result &lt; <span class="number">0</span>) flag = <span class="literal">true</span>; </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a &lt; <span class="number">0</span> &amp;&amp; b &lt; <span class="number">0</span> &amp;&amp; result &gt;= <span class="number">0</span> ) flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (result &gt; c) flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> flag = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Case #%d: true\n"</span>, i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Case #%d: false\n"</span>, i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="hello-world-for-u"><a href="#Hello-world-for-U" class="headerlink" title="Hello world for U"></a>Hello world for U</h2><h3 id="题目"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>Given any string of <em>N</em> (≥5) characters, you are asked to form the characters into the shape of <code>U</code>. For example, <code>helloworld</code> can be printed as:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">h  d</span><br><span class="line">e  l</span><br><span class="line">l  r</span><br><span class="line">lowo</span><br></pre></td></tr></table></figure><p>That is, the characters must be printed in the original order, starting top-down from the left vertical line with <em>n</em>1 characters, then left to right along the bottom line with <em>n</em>2 characters, and finally bottom-up along the vertical line with <em>n</em>3 characters. And more, we would like <code>U</code> to be as squared as possible – that is, it must be satisfied that <em>n</em>1=<em>n</em>3=max{ <em>k</em> | <em>k</em>≤<em>n</em>2 for all 3≤<em>n</em>2≤<em>N</em> } with <em>n</em>1+<em>n</em>2+<em>n</em>3−2=<em>N</em>.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case contains one string with no less than 5 and no more than 80 characters in a line. The string contains no white space.</p><p><strong>Output Specification:</strong></p><p>For each test case, print the input string in the shape of U as specified in the description.</p><p><strong>Sample Input:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helloworld!</span><br></pre></td></tr></table></figure><p><strong>Sample Output:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">h   !</span><br><span class="line">e   d</span><br><span class="line">l   l</span><br><span class="line">lowor</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span>::<span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line">    gets(str);</span><br><span class="line">    <span class="keyword">int</span> N = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">int</span> n1 = (N+<span class="number">2</span>)/<span class="number">3</span>, n3 = n1, n2 = N + <span class="number">2</span> - n1 -n3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n1 - <span class="number">1</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,str[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n2 - <span class="number">2</span>; j++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c\n"</span>,str[N - i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n2; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,str[n1 + i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="b1031"><a href="#B1031" class="headerlink" title="B1031"></a>B1031</h2><p>有点难度的</p><p>自己登陆网页去看吧，我也懒得整理。</p>]]></content>
      
      
      <categories>
          
          <category> PAT备考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> Coding </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
