{"pages":[{"title":"About","text":"可可爱爱 一枚程序员 fighting 🤩","link":"/about/index.html"}],"posts":[{"title":"PAT编程之路","text":"用来记录自己写错的，比较好的例题。 洗牌题目Shuffling is a procedure used to randomize a deck of playing cards. Because standard shuffling techniques are seen as weak, and in order to avoid “inside jobs” where employees collaborate with gamblers by performing inadequate shuffles, many casinos employ automatic shuffling machines. Your task is to simulate a shuffling machine. The machine shuffles a deck of 54 cards according to a given random order and repeats for a given number of times. It is assumed that the initial status of a card deck is in the following order: 12345S1, S2, ..., S13, H1, H2, ..., H13, C1, C2, ..., C13, D1, D2, ..., D13, J1, J2 where “S” stands for “Spade”, “H” for “Heart”, “C” for “Club”, “D” for “Diamond”, and “J” for “Joker”. A given order is a permutation of distinct integers in [1, 54]. If the number at the i-th position is j, it means to move the card from position i to position j. For example, suppose we only have 5 cards: S3, H5, C1, D13 and J2. Given a shuffling order {4, 2, 5, 3, 1}, the result will be: J2, H5, D13, S3, C1. If we are to repeat the shuffling again, the result will be: C1, H5, S3, J2, D13. Input Specification: Each input file contains one test case. For each case, the first line contains a positive integer K (≤20) which is the number of repeat times. Then the next line contains the given order. All the numbers in a line are separated by a space. Output Specification: For each test case, print the shuffling results in one line. All the cards are separated by a space, and there must be no extra space at the end of the line. Sample Input: 12236 52 37 38 3 39 40 53 54 41 11 12 13 42 43 44 2 4 23 24 25 26 27 6 7 8 48 49 50 51 9 10 14 15 16 5 17 18 19 1 20 21 22 28 29 30 31 32 33 34 35 45 46 47 Sample Output: 1S7 C11 C10 C12 S1 H7 H8 H9 D8 D9 S11 S12 S13 D10 D11 D12 S3 S4 S6 S10 H1 H2 C13 D2 D3 D4 H6 H3 D13 J1 J2 C1 C2 C3 C4 D1 S5 H5 H11 H12 C6 C7 C8 C9 S2 S8 S9 H10 D5 D6 D7 H4 H13 C5 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;vector&gt;using namespace::std;// 也许可以用数字来代替输出void shuffle(vector&lt;int&gt; sh, vector&lt;int&gt; &amp;raw){ vector&lt;int&gt; result; result.resize(raw.size()); for(int i = 0; i &lt; 54 ; i ++){ result[sh[i] - 1] = raw[i]; } raw = result;}int main() { int n = 0; vector&lt;int&gt; list; vector&lt;int&gt; raw ; cin &gt;&gt; n; for(int i = 0 ; i &lt; 54 ; i++){ raw.push_back(i+1); } for(int i = 0; i &lt; 54; i++){ int k = 0; cin &gt;&gt; k; list.push_back(k); } for(int i = 0 ; i &lt; n; i++){ shuffle(list,raw); } for(int i = 0 ; i &lt; 54; i++) { int re = raw[i]; int key = (int)re/13; string res = \"\"; if(re == 53) res = \"J1\"; else if(re == 54) res = \"J2\"; else if(re == 13) res = \"S13\"; else if(re == 26) res = \"H13\"; else if(re == 39) res = \"C13\"; else if(re == 52) res = \"D13\"; else{ if(key == 0){ res += \"S\"; res += to_string(re%13); } else if (key == 1){ res += \"H\"; res += to_string(re%13); } else if (key == 2){ res += \"C\"; res += to_string(re%13); } else if (key == 3){ res += \"D\"; res += to_string(re%13); } } if(i == 53) cout &lt;&lt; res; else cout &lt;&lt; res &lt;&lt; \" \"; } return 0;} A + B and C题目Given three integers A, B and C in [−263,263], you are supposed to tell whether A+B&gt;C. Input Specification: The first line of the input gives the positive number of test cases, T (≤10). Then T test cases follow, each consists of a single line containing three integers A, B and C, separated by single spaces. Output Specification: For each test case, output in one line Case #X: true if A+B&gt;C, or Case #X: false otherwise, where X is the case number (starting from 1). Sample Input: 123431 2 32 3 49223372036854775807 -9223372036854775808 0 Sample Output: 123Case #1: falseCase #2: trueCase #3: false 代码1234567891011121314151617181920212223242526272829#include &lt;iostream&gt;#include &lt;cstdio&gt;//#include &lt;vector&gt;using namespace::std;int main(){ int n; cin &gt;&gt; n; for(int i = 0; i &lt; n; i++){ long long a,b,c; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; long long result = a + b; bool flag; if (a &gt; 0 &amp;&amp; b &gt; 0 &amp;&amp; result &lt; 0) flag = true; else if (a &lt; 0 &amp;&amp; b &lt; 0 &amp;&amp; result &gt;= 0 ) flag = false; else if (result &gt; c) flag = true; else flag = false; if(flag == true){ printf(\"Case #%d: true\\n\", i+1); } else{ printf(\"Case #%d: false\\n\", i+1); } } return 0;} Hello world for U题目Given any string of N (≥5) characters, you are asked to form the characters into the shape of U. For example, helloworld can be printed as: 1234h de ll rlowo That is, the characters must be printed in the original order, starting top-down from the left vertical line with n1 characters, then left to right along the bottom line with n2 characters, and finally bottom-up along the vertical line with n3 characters. And more, we would like U to be as squared as possible – that is, it must be satisfied that n1=n3=max{ k | k≤n2 for all 3≤n2≤N } with n1+n2+n3−2=N. Input Specification: Each input file contains one test case. Each case contains one string with no less than 5 and no more than 80 characters in a line. The string contains no white space. Output Specification: For each test case, print the input string in the shape of U as specified in the description. Sample Input: 1helloworld! Sample Output: 1234h !e dl llowor 代码12345678910111213141516171819202122232425#include &lt;cstdio&gt;#include &lt;cstring&gt;using namespace::std;int main(){ char str[100]; gets(str); int N = strlen(str); int n1 = (N+2)/3, n3 = n1, n2 = N + 2 - n1 -n3; for(int i = 0; i &lt; n1 - 1; i++){ printf(\"%c\",str[i]); for(int j = 0; j &lt; n2 - 2; j++){ printf(\" \"); } printf(\"%c\\n\",str[N - i - 1]); } for(int i = 0; i &lt; n2; i++){ printf(\"%c\",str[n1 + i - 1]); } return 0;} B1031有点难度的 自己登陆网页去看吧，我也懒得整理。","link":"/2020/04/08/PAT%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%B7%AF/"}],"tags":[{"name":"PAT","slug":"PAT","link":"/tags/PAT/"},{"name":"Coding","slug":"Coding","link":"/tags/Coding/"}],"categories":[{"name":"PAT备考","slug":"PAT备考","link":"/categories/PAT%E5%A4%87%E8%80%83/"}]}